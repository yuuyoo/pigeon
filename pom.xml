<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>cn.technotes</groupId>
	<artifactId>pigeon</artifactId>
	<packaging>jar</packaging>
	<version>0.0.1-beta</version>

	<name>pigeon</name>
	<url>https://github.com/yuuyoo/pigeon</url>

	<properties>
		<slf4j.version>1.7.33</slf4j.version>
		<logback.version>1.2.10</logback.version>
		<junit.version>4.11</junit.version>
	</properties>

	<dependencies>
		<!-- 解决 HttpServer 警告 -->
		<dependency>
			<groupId>com.sun.net.httpserver</groupId>
			<artifactId>http</artifactId>
			<version>20070405</version>
		</dependency>

		<!-- log -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<!-- 应用的main class -->
							<mainClass>cn.technotes.pigeon.App</mainClass>
							<!-- 是否要把第三方jar放到manifest的classpath中 -->
							<addClasspath>true</addClasspath>
							<!-- 生成的manifest中classpath的前缀，填写依赖jar包相对于项目jar包的路径 -->
							<classpathPrefix>../lib/</classpathPrefix>
						</manifest>
						<!--将资源文件目录添加到classpath中，打包后运行项目时则会在该目录下加载配置文件 -->
						<manifestEntries>
							<!--填写配置文件相对于项目jar包的路径 -->
							<!--我的项目jar包在lib目录下，配置文件在和lib同级的conf目录下 -->
							<Class-Path>../conf/</Class-Path>
						</manifestEntries>
					</archive>
					<!--项目打包为jar包时排除这些文件，如果将配置文件打到jar包，则会优先读取jar包中的配置文件，不会读取conf目录下的配置文件 -->
					<!--注意这玩意从编译结果目录开始算目录结构 -->
					<excludes>
						<exclude>**/*.properties</exclude>
						<exclude>**/*.bat</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<finalName>pigeon-${project.version}</finalName>
					<!--jar包名字是否在finalName后追加AssemblyId -->
					<appendAssemblyId>true</appendAssemblyId>
					<descriptors>
						<!--xml文件中配置了打包的相关配置 -->
						<descriptor>src/main/resources/package.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<!--名字任意 -->
						<id>make-assembly</id>
						<!-- 绑定到package生命周期阶段上 -->
						<phase>package</phase>
						<goals>
							<!-- 只运行一次 -->
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.1</version>
			</plugin>
		</plugins>
	</build>

</project>
